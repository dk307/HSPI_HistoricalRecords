name: 'Unit Tests'

on:  
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
    SONAR_PROJECT_KEY: "dk307_HSPI_HistoricalRecords"
    SONAR_SCANNER_DOWNLOAD_URL: "https://github.com/SonarSource/sonar-scanner-msbuild/releases/download/5.4.0.40033/sonar-scanner-msbuild-5.4.0.40033-net46.zip"
    DOTCOVER_DOWNLOAD_URL: "https://download.jetbrains.com/resharper/dotUltimate.2021.2.2/JetBrains.dotCover.CommandLineTools.2021.2.2.zip"
    SLN_FILE: "HSPI_HistoricalRecords.sln"
    TEST_FILE_WIN: "tests\\bin\\Debug\\HSPI_HistoricalRecordsTest.dll"
    TEST_FILE_UBUNTU: "./tests/bin/Debug/HSPI_HistoricalRecordsTest.dll"

jobs:
  build-cache-test-win:
    name: Build, cache and test on Windows
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Navigate to Workspace
        run: cd $GITHUB_WORKSPACE
    
      - name: Setup VS Dev Environment
        uses: seanmiddleditch/gha-setup-vsdevenv@v4
    
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.2.0
   
      - name: Cache Nuget Packages
        uses: actions/cache@v2
        id: nuget
        with:
         path: ~/.nuget/packages
         key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
         restore-keys: ${{ runner.os }}-nuget-
        
      - name: Restore Nuget Packages
        run: nuget restore ${{ env.SLN_FILE }}

      - name: Build Debug
        shell: powershell
        run: msbuild.exe ${{ env.SLN_FILE }} /p:platform="Any CPU" /p:configuration="Debug"

      - name: Upload unit tests binaries
        id: unit-test-binaries
        uses: actions/upload-artifact@v3
        with:
         path: .\tests\bin\Debug
         name: Test-Files-${{ github.sha }}

      - name: Upload binaries
        id: test-binaries
        uses: actions/upload-artifact@v3
        with:
         path: .\plugin\bin\Debug
         name: Dll-Files-${{ github.sha }}

      - name: Install NUnit.ConsoleRunner
        run: nuget install NUnit.ConsoleRunner -Version 3.16.3 -DirectDownload -OutputDirectory .

      - name: Run tests
        shell: powershell
        run: ./NUnit.ConsoleRunner.3.16.3/tools/nunit3-console.exe ${{ env.TEST_FILE_WIN }} --framework=net-4.6

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Windows Unit Tests
          path: TestResults/*.trx
          reporter: dotnet-trx

  cache-use-build-ubuntu:
    name: Test on Ubuntu
    runs-on: ubuntu-latest
    needs: [build-cache-test-win]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup mono
        run:  |
          sudo apt install dirmngr ca-certificates gnupg
          sudo gpg --homedir /tmp --no-default-keyring --keyring /usr/share/keyrings/mono-official-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
          echo "deb [signed-by=/usr/share/keyrings/mono-official-archive-keyring.gpg] https://download.mono-project.com/repo/debian stable-buster main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
          sudo apt update
          sudo apt install mono-devel

      - name: Navigate to Workspace
        run: cd $GITHUB_WORKSPACE

      - name: Download binaries
        id: test-binaries
        uses: actions/download-artifact@v3
        with:
         path: ./plugin/bin/Debug
         name: Dll-Files-${{ github.sha }}

      - name: Download unit tests binaries
        uses: actions/download-artifact@v3
        with:
          path: ./tests/bin/Debug
          name: Test-Files-${{ github.sha }}

      - name: Install NUnit.ConsoleRunner
        run: nuget install NUnit.ConsoleRunner -Version 3.16.3 -DirectDownload -OutputDirectory .



      - run: ls -l -R ./tests/bin/Debug

      - name: Run tests
        shell: powershell
        run: ./NUnit.ConsoleRunner.3.16.3/tools/nunit3-console.exe ${{ env.TEST_FILE_WIN }} --framework=mono

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Ubuntu Unit Tests
          path: TestResults/*.trx
          reporter: dotnet-trx